// src/components/ARLotteryView.js
import React, { useState, useEffect, useRef } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { supabase } from "../supabaseClient";
import { ClipLoader } from "react-spinners";
import * as THREE from "three";
import { ARButton } from "three/examples/jsm/webxr/ARButton.js";

const ARLotteryView = () => {
  const { id } = useParams();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [ticket, setTicket] = useState(null);
  const [arStarted, setArStarted] = useState(false);
  const [logs, setLogs] = useState([]);

  const containerRef = useRef(null);
  const sceneRef = useRef(null);
  const rendererRef = useRef(null);
  const cameraRef = useRef(null);
  const objectRef = useRef(null);
  const navigate = useNavigate();

  const addLog = (message) => {
    setLogs((prev) => [...prev, message].slice(-10));
  };

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞
  useEffect(() => {
    const fetchTicket = async () => {
      setLoading(true);
      try {
        const { data, error } = await supabase
          .from("ar_lottery_tickets")
          .select("*")
          .eq("id", id)
          .single();

        if (error) throw error;
        setTicket(data);

        if (!data.viewed) {
          await supabase
            .from("ar_lottery_tickets")
            .update({ viewed: true })
            .eq("id", id);
        }
      } catch (err) {
        addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞: ${err.message}`);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchTicket();
  }, [id]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AR
  const initAR = async () => {
    addLog("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AR –Ω–∞—á–∞—Ç–∞");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
    if (window.location.protocol !== "https:" && window.location.hostname !== "localhost") {
      setError("WebXR —Ç—Ä–µ–±—É–µ—Ç HTTPS.");
      addLog("–û—à–∏–±–∫–∞: HTTPS —Ç—Ä–µ–±—É–µ—Ç—Å—è");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WebXR
    if (!navigator.xr) {
      setError("WebXR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Chrome 81+.");
      addLog("–û—à–∏–±–∫–∞: WebXR –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ immersive-ar
    try {
      const isSupported = await navigator.xr.isSessionSupported("immersive-ar");
      if (!isSupported) {
        setError("AR-—Ä–µ–∂–∏–º –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.");
        addLog("–û—à–∏–±–∫–∞: immersive-ar –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
        return;
      }
    } catch (err) {
      addLog(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ WebXR: ${err.message}`);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AR.");
      return;
    }

    try {
      // –°—Ü–µ–Ω–∞
      const scene = new THREE.Scene();
      sceneRef.current = scene;

      // –ö–∞–º–µ—Ä–∞
      const camera = new THREE.PerspectiveCamera(
        70,
        window.innerWidth / window.innerHeight,
        0.01,
        20
      );
      cameraRef.current = camera;

      // –†–µ–Ω–¥–µ—Ä–µ—Ä
      const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      renderer.setPixelRatio(window.devicePixelRatio);
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.xr.enabled = true;
      rendererRef.current = renderer;
      containerRef.current.appendChild(renderer.domElement);
      addLog("–†–µ–Ω–¥–µ—Ä–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

      // –û—Å–≤–µ—â–µ–Ω–∏–µ
      const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);
      scene.add(light);

      // AR-–æ–±—ä–µ–∫—Ç
      const geometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);
      const material = ticket?.is_win
        ? new THREE.MeshStandardMaterial({ color: 0xffd700 })
        : new THREE.MeshStandardMaterial({ color: 0x808080 });
      const cube = new THREE.Mesh(geometry, material);
      cube.position.set(0, 0, -0.5);
      cube.visible = true;
      scene.add(cube);
      objectRef.current = cube;
      addLog("–û–±—ä–µ–∫—Ç —Å–æ–∑–¥–∞–Ω");

      // ARButton
      const button = ARButton.createButton(renderer, {
        requiredFeatures: ["local-floor"],
        optionalFeatures: ["dom-overlay"],
        domOverlay: { root: document.body },
      });
      document.body.appendChild(button);
      addLog("ARButton –¥–æ–±–∞–≤–ª–µ–Ω");

      // WebXR —Å–æ–±—ã—Ç–∏—è
      renderer.xr.addEventListener("sessionstart", () => {
        addLog("WebXR —Å–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞");
        objectRef.current.position.set(0, 0, -0.5);
        objectRef.current.visible = true;
        addLog("–ö—É–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–æ–∑–∏—Ü–∏—é");
      });

      renderer.xr.addEventListener("sessionend", () => {
        addLog("WebXR —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        setArStarted(false);
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∫–∞–º–µ—Ä—ã
      try {
        const permissionStatus = await navigator.permissions.query({ name: "camera" });
        if (permissionStatus.state === "denied") {
          setError("–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â—ë–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.");
          addLog("–û—à–∏–±–∫–∞: –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â—ë–Ω");
          return;
        }
        addLog(`–°—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã: ${permissionStatus.state}`);
      } catch (err) {
        addLog(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–º–µ—Ä—ã: ${err.message}`);
      }

      // –ê–Ω–∏–º–∞—Ü–∏—è
      let frameCount = 0;
      const animate = () => {
        renderer.setAnimationLoop((timestamp, frame) => {
          if (objectRef.current) {
            objectRef.current.rotation.x += 0.01;
            objectRef.current.rotation.y += 0.01;
          }
          renderer.render(scene, camera);
          frameCount++;
          if (frameCount % 60 === 0) {
            addLog("–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–¥—Ä–∞");
          }
        });
      };
      animate();

      setArStarted(true);
    } catch (err) {
      addLog(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ AR: ${err.message}`);
      setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å AR: ${err.message}`);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞
  useEffect(() => {
    return () => {
      if (rendererRef.current) {
        rendererRef.current.setAnimationLoop(null);
        rendererRef.current.dispose();
        if (containerRef.current && rendererRef.current.domElement) {
          containerRef.current.removeChild(rendererRef.current.domElement);
        }
      }
    };
  }, []);

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <ClipLoader size={40} color="#000" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
          <h2 className="text-2xl font-bold text-black mb-4 text-center">–û—à–∏–±–∫–∞</h2>
          <p className="text-red-600 text-center">{error}</p>
          <button
            onClick={() => navigate("/dashboard")}
            className="mt-4 w-full py-2 px-4 bg-yellow-500 text-black font-semibold rounded-md hover:bg-yellow-600"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  if (!ticket) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
          <h2 className="text-2xl font-bold text-black mb-4 text-center">–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <p className="text-gray-700 text-center">–ë–∏–ª–µ—Ç AR –ª–æ—Ç–µ—Ä–µ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</p>
          <button
            onClick={() => navigate("/dashboard")}
            className="mt-4 w-full py-2 px-4 bg-yellow-500 text-black font-semibold rounded-md hover:bg-yellow-600"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen relative">
      <div ref={containerRef} className="absolute inset-0"></div>
      {!arStarted ? (
        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-50">
          <div className="text-center text-white">
            <h2 className="text-2xl font-bold mb-6">–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏</h2>
            <p className="mb-8">
              {ticket.is_win
                ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${ticket.win_amount} ‚ÇΩ`
                : "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç–æ—Ç —Ä–∞–∑"}
            </p>
            <button
              onClick={initAR}
              className="px-6 py-3 bg-yellow-500 text-black font-bold rounded-lg hover:bg-yellow-600"
            >
              –ó–∞–ø—É—Å—Ç–∏—Ç—å AR –ø—Ä–æ—Å–º–æ—Ç—Ä
            </button>
          </div>
        </div>
      ) : (
        <div className="absolute inset-0 flex items-center justify-center text-white">
          <div className="text-center p-8 bg-black bg-opacity-70 rounded-lg">
            <h2 className="text-xl font-bold mb-4">AR –†–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</h2>
            <p>
              {ticket.is_win
                ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${ticket.win_amount} ‚ÇΩ`
                : "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç–æ—Ç —Ä–∞–∑"}
            </p>
            <div className="mt-4">
              {ticket.is_win ? (
                <div className="text-6xl mb-2">üí∞</div>
              ) : (
                <div className="text-6xl mb-2">üì¶</div>
              )}
            </div>
            <p className="text-sm mt-4">–ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —Ä–æ–≤–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å</p>
          </div>
        </div>
      )}
      <div className="absolute bottom-4 left-4 right-4 bg-black bg-opacity-50 text-white p-2 max-h-40 overflow-y-auto">
        {logs.map((log, index) => (
          <p key={index} className="text-sm">{log}</p>
        ))}
      </div>
      {!arStarted && (
        <div className="absolute top-4 left-4">
          <button
            onClick={() => navigate("/dashboard")}
            className="p-2 bg-yellow-500 text-black rounded-full shadow-lg"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M10 19l-7-7m0 0l7-7m-7 7h18"
              />
            </svg>
          </button>
        </div>
      )}
    </div>
  );
};

export default ARLotteryView;